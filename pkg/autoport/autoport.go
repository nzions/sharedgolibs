// Package autoport provides auto-generated port configurations from Docker Compose
// This file is generated by portmanager - do not edit manually
// Generated: 2025-07-22 17:12:44 UTC
// Source: docker-compose.yml
package autoport

import "time"

const Version = "v0.1.0"

// ServiceConfig represents a service configuration with port mappings
type ServiceConfig struct {
	Name         string   `json:"name"`
	Image        string   `json:"image"`
	ExternalPort int      `json:"external_port"`
	InternalPort int      `json:"internal_port"`
	Protocol     string   `json:"protocol"`
	HealthPath   string   `json:"health_path,omitempty"`
	IsSecure     bool     `json:"is_secure"`
	IPAddress    string   `json:"ip_address,omitempty"`
	Aliases      []string `json:"aliases,omitempty"`
	Environment  []string `json:"environment,omitempty"`
	DependsOn    []string `json:"depends_on,omitempty"`
}

// PortMapping represents a simple port mapping
type PortMapping struct {
	External int    `json:"external"`
	Internal int    `json:"internal"`
	Service  string `json:"service"`
}

// Configuration holds the complete auto-generated port configuration
type Configuration struct {
	Version          string                   `json:"version"`
	Generated        time.Time                `json:"generated"`
	Source           string                   `json:"source"`
	DockerSocketPath string                   `json:"docker_socket_path,omitempty"`
	DockerAvailable  bool                     `json:"docker_available"`
	Services         map[string]ServiceConfig `json:"services"`
	PortMappings     map[int]PortMapping      `json:"port_mappings"`
}

// GetConfiguration returns the auto-generated configuration
func GetConfiguration() *Configuration {
	return &defaultConfig
}

// GetServiceByPort returns the service configuration for a given external port
func GetServiceByPort(port int) (ServiceConfig, bool) {
	if mapping, exists := defaultConfig.PortMappings[port]; exists {
		if service, exists := defaultConfig.Services[mapping.Service]; exists {
			return service, true
		}
	}
	return ServiceConfig{}, false
}

// GetServiceByName returns the service configuration by service name
func GetServiceByName(name string) (ServiceConfig, bool) {
	service, exists := defaultConfig.Services[name]
	return service, exists
}

// GetAllPorts returns all external ports in use
func GetAllPorts() []int {
	ports := make([]int, 0, len(defaultConfig.PortMappings))
	for port := range defaultConfig.PortMappings {
		ports = append(ports, port)
	}
	return ports
}

// GetServiceNames returns all service names
func GetServiceNames() []string {
	names := make([]string, 0, len(defaultConfig.Services))
	for name := range defaultConfig.Services {
		names = append(names, name)
	}
	return names
}

// Auto-generated configuration data
var defaultConfig = Configuration{
	Version:          Version,
	Generated:        time.Date(2025, 7, 22, 17, 12, 44, 0, time.UTC),
	Source:           "docker-compose.yml",
	DockerSocketPath: "unix:///Users/nzions/.colima/default/docker.sock",
	DockerAvailable:  true,
	Services: map[string]ServiceConfig{
		"amt-backend": {
			Name:         "amt-backend",
			Image:        "amt-backend:latest",
			ExternalPort: 8081,
			InternalPort: 8080,
			Protocol:     "tcp",
			HealthPath:   "http://localhost/health",
			IsSecure:     false,
			IPAddress:    "",
			Aliases:      []string(nil),
			Environment:  []string{"GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=amt-backend", "K_REVISION=dev-001", "K_CONFIGURATION=amt-backend", "PORT=8080", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"ca", "firebase", "gcs", "gmail", "secrets", "metadata"},
		},
		"amt-frontend": {
			Name:         "amt-frontend",
			Image:        "amt-frontend:latest",
			ExternalPort: 8080,
			InternalPort: 8080,
			Protocol:     "tcp",
			HealthPath:   "http://localhost/health",
			IsSecure:     false,
			IPAddress:    "",
			Aliases:      []string(nil),
			Environment:  []string{"GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=amt-frontend", "K_REVISION=dev-001", "K_CONFIGURATION=amt-frontend", "PORT=8080", "SGL_CA=http://ca:8090", "BACKEND_URL=http://amt-backend:8080"},
			DependsOn:    []string{"secrets", "metadata", "amt-backend", "ca", "firebase", "gcs", "gmail"},
		},
		"ca": {
			Name:         "ca",
			Image:        "ca:latest",
			ExternalPort: 8089,
			InternalPort: 8090,
			Protocol:     "tcp",
			HealthPath:   "http://localhost/health",
			IsSecure:     false,
			IPAddress:    "169.254.169.100",
			Aliases:      []string(nil),
			Environment:  []string(nil),
			DependsOn:    []string(nil),
		},
		"firebase": {
			Name:         "firebase",
			Image:        "firebase:latest",
			ExternalPort: 8090,
			InternalPort: 443,
			Protocol:     "tcp",
			HealthPath:   "https://localhost/health",
			IsSecure:     true,
			IPAddress:    "169.254.169.101",
			Aliases:      []string{"firebase.googleapis.com", "firestore.googleapis.com", "identitytoolkit.googleapis.com", "securetoken.googleapis.com", "iamcredentials.googleapis.com"},
			Environment:  []string{"FIREBASE_PORT=443", "PROJECT_ID=emu-project", "FIREBASE_DATA_DIR=/data", "GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=firebase-emulator", "K_REVISION=dev-001", "K_CONFIGURATION=firebase-emulator", "PORT=443", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"ca", "gmail", "metadata"},
		},
		"gcr": {
			Name:         "gcr",
			Image:        "gcr:latest",
			ExternalPort: 8086,
			InternalPort: 443,
			Protocol:     "tcp",
			HealthPath:   "https://localhost/health",
			IsSecure:     true,
			IPAddress:    "169.254.169.102",
			Aliases:      []string{"gcr.io", "registry.googleapis.com"},
			Environment:  []string{"GCR_PORT=443", "GCR_DATA_DIR=/data", "REGISTRY_URL=localhost:443", "GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=gcr-emulator", "K_REVISION=dev-001", "K_CONFIGURATION=gcr-emulator", "PORT=443", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"ca", "metadata"},
		},
		"gcs": {
			Name:         "gcs",
			Image:        "gcs:latest",
			ExternalPort: 8082,
			InternalPort: 443,
			Protocol:     "tcp",
			HealthPath:   "https://localhost/health",
			IsSecure:     true,
			IPAddress:    "169.254.169.103",
			Aliases:      []string{"storage.googleapis.com", "www.googleapis.com"},
			Environment:  []string{"GCS_PORT=443", "GCS_DATA_DIR=/data", "GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=gcs-emulator", "K_REVISION=dev-001", "K_CONFIGURATION=gcs-emulator", "PORT=443", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"ca", "metadata"},
		},
		"gmail": {
			Name:         "gmail",
			Image:        "gmail:latest",
			ExternalPort: 8084,
			InternalPort: 443,
			Protocol:     "tcp",
			HealthPath:   "https://localhost/health",
			IsSecure:     true,
			IPAddress:    "169.254.169.104",
			Aliases:      []string{"gmail.googleapis.com"},
			Environment:  []string{"GMAIL_PORT=443", "GMAIL_DATA_DIR=/data", "GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=gmail-emulator", "K_REVISION=dev-001", "K_CONFIGURATION=gmail-emulator", "PORT=443", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"ca", "metadata"},
		},
		"metadata": {
			Name:         "metadata",
			Image:        "metadata:latest",
			ExternalPort: 8088,
			InternalPort: 80,
			Protocol:     "tcp",
			HealthPath:   "http://localhost/",
			IsSecure:     false,
			IPAddress:    "169.254.169.254",
			Aliases:      []string{"metadata.google.internal"},
			Environment:  []string{"METADATA_PORT=8888", "GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project"},
			DependsOn:    []string(nil),
		},
		"openai": {
			Name:         "openai",
			Image:        "openai:latest",
			ExternalPort: 8087,
			InternalPort: 443,
			Protocol:     "tcp",
			HealthPath:   "https://localhost/health",
			IsSecure:     true,
			IPAddress:    "169.254.169.106",
			Aliases:      []string{"aiplatform.googleapis.com", "api.openai.com"},
			Environment:  []string{"OPENAI_PORT=443", "AI_MODE=openai", "GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=openai-emulator", "K_REVISION=dev-001", "K_CONFIGURATION=openai-emulator", "PORT=443", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"ca", "metadata"},
		},
		"portdash": {
			Name:         "portdash",
			Image:        "portdash:latest",
			ExternalPort: 80,
			InternalPort: 80,
			Protocol:     "tcp",
			HealthPath:   "http://localhost/health",
			IsSecure:     false,
			IPAddress:    "169.254.169.108",
			Aliases:      []string{"portdash.googleemu"},
			Environment:  []string{"GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=portdash", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"metadata"},
		},
		"secrets": {
			Name:         "secrets",
			Image:        "secrets:latest",
			ExternalPort: 8083,
			InternalPort: 443,
			Protocol:     "tcp",
			HealthPath:   "https://localhost/health",
			IsSecure:     true,
			IPAddress:    "169.254.169.105",
			Aliases:      []string{"secretmanager.googleapis.com"},
			Environment:  []string{"SECRETS_GRPC_PORT=443", "GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=secrets-emulator", "K_REVISION=dev-001", "K_CONFIGURATION=secrets-emulator", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"ca", "metadata"},
		},
		"testdaemon": {
			Name:         "testdaemon",
			Image:        "testdaemon:latest",
			ExternalPort: 0,
			InternalPort: 0,
			Protocol:     "",
			HealthPath:   "http://localhost/health",
			IsSecure:     false,
			IPAddress:    "169.254.169.107",
			Aliases:      []string(nil),
			Environment:  []string{"GOOGLE_CLOUD_PROJECT=emu-project", "GCLOUD_PROJECT=emu-project", "K_SERVICE=testdaemon", "K_REVISION=dev-001", "K_CONFIGURATION=testdaemon", "PORT=8080", "SGL_CA=http://ca:8090"},
			DependsOn:    []string{"metadata", "ca", "firebase", "gcs", "gmail", "secrets"},
		},
	},
	PortMappings: map[int]PortMapping{
		80: {
			External: 80,
			Internal: 80,
			Service:  "portdash",
		},
		8080: {
			External: 8080,
			Internal: 8080,
			Service:  "amt-frontend",
		},
		8081: {
			External: 8081,
			Internal: 8080,
			Service:  "amt-backend",
		},
		8082: {
			External: 8082,
			Internal: 443,
			Service:  "gcs",
		},
		8083: {
			External: 8083,
			Internal: 443,
			Service:  "secrets",
		},
		8084: {
			External: 8084,
			Internal: 443,
			Service:  "gmail",
		},
		8086: {
			External: 8086,
			Internal: 443,
			Service:  "gcr",
		},
		8087: {
			External: 8087,
			Internal: 443,
			Service:  "openai",
		},
		8088: {
			External: 8088,
			Internal: 80,
			Service:  "metadata",
		},
		8089: {
			External: 8089,
			Internal: 8090,
			Service:  "ca",
		},
		8090: {
			External: 8090,
			Internal: 443,
			Service:  "firebase",
		},
	},
}
